# datos.ANAC := datos del csv original de aterrizajes y vuelos
datos.ANAC <- read.csv('202109-informe-ministerio.csv', sep=';', encoding = 'utf-8')
datos.ANAC
colnames(datos.ANAC)
require(tidyverse)
# Modificamos un poco los nombres por comodidad
datos.ANAC <- datos.ANAC %>%
rename(
Clase_Vuelo = Clase.de.Vuelo..todos.los.vuelos.,
Clasificacion_Vuelo = `ClasificaciÃ³n.Vuelo`,
)
colnames(datos.ANAC)
datos.ANAC
# datos.vuelos.nacionales := datos del csv de ANAC correspondiente a los vuelos nacionales
datos.vuelos.nacionales <- datos.ANAC %>%
filter(Clasificacion_Vuelo == "Dom", Clase_Vuelo == "Regular")
datos.vuelos.nacionales
datos.vuelos.nacionales <-datos.vuelos.nacionales %>%
mutate(Origen =
if_else(Tipo.de.Movimiento=='Despegue',Aeropuerto,Origen...Destino),
Destino =
if_else(Tipo.de.Movimiento=='Despegue',Origen...Destino,Aeropuerto))
datos.vuelos.nacionales
library(httr)
library(rvest)
pagina.wiki <- read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla <- html_element(pagina.wiki,'.wikitable')
datos.wiki     <- html_table(elemento_tabla)
# datos.wiki := datos correspondientes a la tabla de wikipedia (sin ningun filtro)
datos.wiki
codigos <- unique(datos.wiki$IATA)
codigos <- codigos[codigos!=""] #elimino el string vacio
length(codigos)
codigos
# Inicializamos algunas variables
latitud <- c()
longitud <- c()
primer.filtro  <- c()
segundo.filtro <- c()
coordenadas.filtradas <- c()
# Tomamos la columna de coordenadas desde la tabla de wikipedia
coordenadas <- datos.wiki$Coordinates
# Separamos las coordenadas mediante el simbolo '/'
# Esto nos vividira el string en una lista
primer.filtro <- strsplit(coordenadas, split='/')
# Recorremos cada coordenada, nos quedamos con los datos en formato numerico
# Creando un vector que tendra en primer lugar las latitudes y en el segundo
# Las longitudes
for( i in (1:length(coordenadas)) ) {
segundo.filtro[i]        <- gsub( '[^0-9,;,.,-]', '', primer.filtro[[i]][3] )
coordenadas.filtradas[i] <- strsplit( segundo.filtro[i], ';' )
}
# Del vector de coordenadas, creamos vectores de latitud y longitud por separado
for( i in (1:length(coordenadas.filtradas))) {
latitud  <- c( latitud, coordenadas.filtradas[[i]][1])
longitud <- c(longitud, coordenadas.filtradas[[i]][2])
}
# Agregamos cols con latitud y longitud a los datos de wikipedia
datos.wiki <- datos.wiki %>%
mutate(
latitud=latitud,
longitud=longitud
) %>%
filter(
IATA != ''
) %>%
select(
`City served`,
Province,
IATA,
`Airport name`,
latitud, longitud
) %>%
rename(
ciudad = `City served`,
provincia = Province,
Aeropuerto = `Airport name`
)
datos.wiki
datos.vuelos.nacionales <- datos.vuelos.nacionales %>%
filter( Clasificacion_Vuelo %in% "Dom" &
Calidad.dato        %in% "DEFINITIVO"    &
Origen              %in% codigos &
Destino             %in% codigos
)
datos.vuelos.nacionales
codigos.ANAC <- datos.ANAC %>% select(Aeropuerto)
codigos.wiki <- datos.wiki %>% select(IATA)
table(codigos.ANAC)
codigos.ANAC <- names(table(codigos.ANAC))
cat("\n ------------ \n\n", codigos.ANAC ,"\n", length(codigos.ANAC),"\n ------------ \n\n")
codigos.wiki <- names(table(codigos.wiki))
cat("\n ------------ \n\n", codigos.wiki, "\n ------------ \n\n")
cat("\n ------------ \n\n", length(codigos.wiki), "\n ------------ \n\n")
# Funcion burbuja := realiza un "burbujeo" entre vectores.
#   Esta, me permitira comparar los elementos coincidentes entre estos dos vectores.
burbuja <- function(vec.prim, vec.sec){
coinciden <- c()
for (i in (1:length(vec.prim))){
for (j in (1:length(vec.sec))){
if (vec.sec[j] == vec.prim[i]) {
coinciden <- c(coinciden, vec.prim[i])
}
}
}
return(coinciden)
}
burbuja(codigos.wiki, codigos.ANAC)
data.nueva <- read.csv("sna_abril_2021_fixed_encoding.csv", encoding = 'utf-8')
data.nueva
codigos.ita <- names(table(data.nueva %>% select(ita)))
codigos.ana <- names(table(data.nueva %>% select(ana)))
cat("------------------------------",
"\n Comparación ita - ANAC \n",
"------------------------------\n",
burbuja(codigos.ANAC, codigos.ita ))
cat("\n------------------------------",
"\n Comparación ana - ANAC \n",
"------------------------------\n",
burbuja(codigos.ana, codigos.ANAC))
datos.aeropuertos.nacionales <- data.nueva %>%
select(
cpr, nam, fna, ana, x, y
) %>%
rename(
provincia = cpr,
ciudad = nam,
aeropuerto = fna,
codigo.ANAC = ana,
longitud = x,
latitud = y
)
datos.aeropuertos.nacionales
new.df.vuelos.nacionales <- datos.ANAC %>%
filter(
Clasificacion_Vuelo == "Dom",
Clase_Vuelo == "Regular"
)
new.df.vuelos.nacionales<- new.df.vuelos.nacionales %>%
mutate(Origen =
if_else(Tipo.de.Movimiento=='Despegue',Aeropuerto,Origen...Destino),
Destino =
if_else(Tipo.de.Movimiento=='Despegue',Origen...Destino,Aeropuerto)
) %>%
filter(
Calidad.dato        %in% "DEFINITIVO"    &
Origen              %in% codigos.ana &
Destino             %in% codigos.ana
)
new.df.vuelos.nacionales
# Unimos los datasets utilizando la funcion merge
# Utililizando los datos del Origen
df_origen <- merge( x=new.df.vuelos.nacionales,
y=datos.aeropuertos.nacionales,
by.x='Origen', by.y='codigo.ANAC')
# Utilizando los datos del Destino
df_destino <- merge(x=new.df.vuelos.nacionales,
y=datos.aeropuertos.nacionales,
by.x='Destino', by.y='codigo.ANAC')
#ordeno a partir de fecha y hora (y si coinciden a partir del modelo de avion)
new.df.vuelos.nacionales <- new.df.vuelos.nacionales %>%
arrange( Fecha,
Hora.UTC,
Aeronave
)
# Realizamos el mismo ordenamiento con los datos mergeados
df_destino <- df_destino %>% arrange( Fecha, Hora.UTC, Aeronave )
df_origen  <- df_origen  %>% arrange( Fecha, Hora.UTC, Aeronave )
#agrego las columnas a los datos filtrados
new.df.vuelos.nacionales <- new.df.vuelos.nacionales %>%
mutate(
ciudad.origen = df_origen$ciudad,
ciudad.destino = df_destino$ciudad,
provincia.origen = df_origen$provincia,
provincia.destino = df_destino$provincia,
lat.origen = df_origen$latitud,
lat.destino = df_destino$latitud,
long.origen = df_origen$longitud,
long.destino = df_destino$longitud
)
new.df.vuelos.nacionales
new.df.vuelos.nacionales <- new.df.vuelos.nacionales %>%
select(
Fecha, Hora.UTC, Pasajeros, Clase_Vuelo,
Tipo.de.Movimiento, Aerolinea.Nombre,
Aeronave, Origen, Destino,
ciudad.origen, ciudad.destino,
provincia.origen, provincia.destino,
lat.origen, long.origen, lat.destino, long.destino,
) %>%
mutate(
Pasajeros = as.double(Pasajeros),
lat.origen = as.double(lat.origen),
long.origen = as.double(long.origen),
lat.destino = as.double(lat.destino),
long.destino = as.double(long.destino),
) %>%
rename(
Aerolinea = Aerolinea.Nombre
)
new.df.vuelos.nacionales
require(geosphere)
# Iniciamos algunas variables
distancias <- c()
latitudes.origenes  <- new.df.vuelos.nacionales$lat.origen
longitudes.origenes <- new.df.vuelos.nacionales$long.origen
latitudes.destino   <- new.df.vuelos.nacionales$lat.destino
longitudes.destino  <- new.df.vuelos.nacionales$long.destino
# Calculamos las distancias utilizando disHaversine
# Pasandolas a Kilometros
for (i in 1:45024){
distancias <- c( distancias,
(distHaversine(
c(latitudes.origenes[i],longitudes.origenes[i]),
c(latitudes.destino[i],longitudes.destino[i]))
)/1000)
}
distancias[1:3]
new.df.vuelos.nacionales <- new.df.vuelos.nacionales %>%
mutate(distancia.km = distancias)
new.df.vuelos.nacionales
aterrizajes <- new.df.vuelos.nacionales %>% filter(Tipo.de.Movimiento == "Aterrizaje")
despegues <- new.df.vuelos.nacionales %>% filter(Tipo.de.Movimiento == "Despegue")
dim(aterrizajes)
dim(despegues)
# Tomamos los datos de las horas
horas <- new.df.vuelos.nacionales %>%
select(Hora.UTC) %>%
mutate(numerico = as.double(gsub(":", ".", Hora.UTC)))
horas
hs  <- c()
min <- c()
hs.decimal <- c()
hs_string <-  strsplit(new.df.vuelos.nacionales$Hora.UTC, ":")
for (i in (1:length(hs_string))){
hs[i]  <- as.double(hs_string[[i]][1])
min[i] <- as.double(hs_string[[i]][2])
hs.decimal[i] <- ( (hs[i] * 60) + min[i] )/60
}
hs.decimal[1:10]
new.df.vuelos.nacionales <- new.df.vuelos.nacionales %>%
mutate(horario.num = hs.decimal)
new.df.vuelos.nacionales
